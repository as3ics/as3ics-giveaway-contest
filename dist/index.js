/** @format */
function shuffle(array) {
    let currentIndex = array.length, randomIndex;
    // While there remain elements to shuffle.
    while (currentIndex != 0) {
        // Pick a remaining element.
        randomIndex = Math.floor(Math.random() * currentIndex);
        currentIndex--;
        // And swap it with the current element.
        [array[currentIndex], array[randomIndex]] = [
            array[randomIndex],
            array[currentIndex],
        ];
    }
    return array;
}
var seed = Math.random();
function random() {
    var x = Math.sin(seed++) * 10000;
    return x - Math.floor(x);
}
function rand(min, max) {
    // min and max included
    return Math.floor(random() * (max - min + 1) + min);
}
const print = (str) => {
    console.log(str);
};
print("");
print("Welcome to the AS3ICS Giveaway Determination");
print("");
print("all data and processes will be explained and logged throughout this script.");
print("");
print("importing contestants...");
import contestants from "./assets/2023-05-01-entries.json";
print("import successful");
print("");
print("printing contestants");
print("");
print(contestants);
print("");
print("creating entry bucket...");
const bucket = [];
print("bucket successfully created");
print("");
print("print bucket initial state");
print(bucket);
print("");
print("filling bucket with entries...");
for (let i = 0; i < contestants.length; i++) {
    for (let j = 0; j < contestants[i].entries; j++) {
        bucket.push(contestants[i].enum);
    }
}
print("bucket filled.");
print("");
print("print bucket state");
print(bucket);
print("");
let averageEntries = bucket.length / contestants.length;
print(`number contestants: ${contestants.length}`);
print(`number entries: ${bucket.length}`);
print(`average entries per contestant: ${averageEntries}`);
print(`average odds of winning: ${(100.0 * averageEntries) / bucket.length}`);
print("");
print("contestant individual winning odds...");
print("");
let oddsIntegral = 0;
for (let i = 0; i < contestants.length; i++) {
    let odds = contestants[i].entries / bucket.length;
    oddsIntegral += odds;
    print(`contestant: ${contestants[i].name} odds: ${100.0 * odds}`);
}
print("");
print(`total odds calculated: ${100.0 * oddsIntegral}`);
print("");
if (oddsIntegral > 1.01 || oddsIntegral < 0.99) {
    print("error: odds parity check failure");
}
else {
    print("odds parity check success!");
}
print("");
print("Introducing entropy to bucket...");
for (let i = 0; i < 16; i++) {
    print("shuffling bucket...");
    shuffle(bucket);
}
print("");
print("print new bucket:");
print("");
print(bucket);
print("");
print("proceeding to determine contest winner. May the odds be ever in your favor, and best of luck to all of the contestants.");
print("");
print("pulling random index...");
print("");
const winningIndex = rand(0, bucket.length - 1);
const winningEnum = bucket[winningIndex];
print(`winning index: ${winningIndex}`);
print(`winning enum: ${winningEnum}`);
print("");
print(`And we have a winner! Contestant ${winningEnum}`);
print("");
print("lets find the identity of the winner...");
print("");
let winner;
for (let i = 0; i < contestants.length; i++) {
    if (contestants[i].enum == winningEnum) {
        winner = contestants[i];
        break;
    }
}
print("Congratulations to the winner of this contest. The odds were with you this day.");
print("");
print(winner);
``;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsY0FBYztBQVFkLFNBQVMsT0FBTyxDQUFDLEtBQUs7SUFDcEIsSUFBSSxZQUFZLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFDN0IsV0FBVyxDQUFDO0lBRWQsMENBQTBDO0lBQzFDLE9BQU8sWUFBWSxJQUFJLENBQUMsRUFBRTtRQUN4Qiw0QkFBNEI7UUFDNUIsV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLFlBQVksQ0FBQyxDQUFDO1FBQ3ZELFlBQVksRUFBRSxDQUFDO1FBRWYsd0NBQXdDO1FBQ3hDLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxFQUFFLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxHQUFHO1lBQzFDLEtBQUssQ0FBQyxXQUFXLENBQUM7WUFDbEIsS0FBSyxDQUFDLFlBQVksQ0FBQztTQUNwQixDQUFDO0tBQ0g7SUFFRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFFRCxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDekIsU0FBUyxNQUFNO0lBQ2IsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQztJQUNqQyxPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzNCLENBQUM7QUFFRCxTQUFTLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRztJQUNwQix1QkFBdUI7SUFDdkIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBRUQsTUFBTSxLQUFLLEdBQUcsQ0FBQyxH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